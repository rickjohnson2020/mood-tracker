{"ast":null,"code":"var _jsxFileName = \"/Users/yanoriku/Documents/personal_project/mood_tracker/frontend/src/Top.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getMood } from './api/getMood';\nimport { MoodContent } from './components/MoodContent';\nimport { PieChart, Pie, Cell, LabelList } from \"recharts\";\nimport './Top.css'; // import { CategoryList } from '../components/CategoryList'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#FFCC33', '#98FB98', '#DDA0DD', '#D3D3D3'];\nconst RADIAN = Math.PI / 180;\n\nconst renderCustomizedLabel = ({\n  name,\n  value,\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"text\", {\n      x: x,\n      y: y,\n      fill: \"white\",\n      textAnchor: x > cx ? 'start' : 'end',\n      dominantBaseline: \"central\",\n      children: `${(percent * 100).toFixed(0)}%`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport const Top = () => {\n  _s();\n\n  const initialState = {\n    id: '',\n    date: '',\n    mood: ''\n  };\n  const [mood, setMood] = useState(initialState);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    getMood().then(d => {\n      setMood(d);\n      setLoading(false);\n    }).catch(err => console.log(err));\n  }, []); // added\n\n  let data = [{\n    name: 'rad',\n    count: 0\n  }, {\n    name: 'good',\n    count: 0\n  }, {\n    name: 'meh',\n    count: 0\n  }, {\n    name: 'bad',\n    count: 0\n  }]; // ここにmap関数で取り出し、個数を数える\n\n  Array.from(mood).map(value => {\n    if (value.mood === 'rad') {\n      data[0].count += 1;\n    } else if (value.mood === 'good') {\n      data[1].count += 1;\n    } else if (value.mood === 'meh') {\n      data[2].count += 1;\n    } else {\n      data[3].count += 1;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Top\",\n        children: mood.map(d => /*#__PURE__*/_jsxDEV(MoodContent, { ...d\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 27\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pie-chart-parent\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          className: \"pie-chart-child\",\n          width: 400,\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(Pie, {\n            data: data,\n            cx: 200,\n            cy: 200,\n            labelLine: false,\n            label: renderCustomizedLabel,\n            outerRadius: 150,\n            fill: \"#8884d8\",\n            dataKey: \"count\",\n            children: [/*#__PURE__*/_jsxDEV(LabelList, {\n              dataKey: \"name\",\n              position: \"outsideRight\",\n              angle: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length]\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Top, \"bF1EmmDQnEhm6O/mkf05GAZ6U5w=\");\n\n_c = Top;\n\nvar _c;\n\n$RefreshReg$(_c, \"Top\");","map":{"version":3,"sources":["/Users/yanoriku/Documents/personal_project/mood_tracker/frontend/src/Top.js"],"names":["React","useState","useEffect","getMood","MoodContent","PieChart","Pie","Cell","LabelList","COLORS","RADIAN","Math","PI","renderCustomizedLabel","name","value","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","cos","y","sin","toFixed","Top","initialState","id","date","mood","setMood","loading","setLoading","then","d","catch","err","console","log","data","count","Array","from","map","entry","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,SAA9B,QAA+C,UAA/C;AAEA,OAAO,WAAP,C,CACA;;;;AAGA,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAf;AAEA,MAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,GAAU,GAAzB;;AACA,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,EAAf;AAAmBC,EAAAA,EAAnB;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA,WAAjC;AAA8CC,EAAAA,WAA9C;AAA2DC,EAAAA,OAA3D;AAAoEC,EAAAA;AAApE,CAAD,KAAiF;AAC7G,QAAMC,MAAM,GAAGJ,WAAW,GAAG,CAACC,WAAW,GAAGD,WAAf,IAA8B,GAA3D;AACA,QAAMK,CAAC,GAAGR,EAAE,GAAGO,MAAM,GAAGZ,IAAI,CAACc,GAAL,CAAS,CAACP,QAAD,GAAYR,MAArB,CAAxB;AACA,QAAMgB,CAAC,GAAGT,EAAE,GAAGM,MAAM,GAAGZ,IAAI,CAACgB,GAAL,CAAS,CAACT,QAAD,GAAYR,MAArB,CAAxB;AAEA,sBACE;AAAA,2BACE;AAAM,MAAA,CAAC,EAAEc,CAAT;AAAY,MAAA,CAAC,EAAEE,CAAf;AAAkB,MAAA,IAAI,EAAC,OAAvB;AAA+B,MAAA,UAAU,EAAEF,CAAC,GAAGR,EAAJ,GAAS,OAAT,GAAmB,KAA9D;AAAqE,MAAA,gBAAgB,EAAC,SAAtF;AAAA,gBACI,GAAE,CAACK,OAAO,GAAG,GAAX,EAAgBO,OAAhB,CAAwB,CAAxB,CAA2B;AADjC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,CAZD;;AAkBA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACvB,QAAMC,YAAY,GAAG;AACnBC,IAAAA,EAAE,EAAE,EADe;AAEnBC,IAAAA,IAAI,EAAE,EAFa;AAGnBC,IAAAA,IAAI,EAAE;AAHa,GAArB;AAMA,QAAK,CAACA,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC6B,YAAD,CAA/B;AACA,QAAK,CAACK,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,CAAC,IAAD,CAArC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,GACNkC,IADD,CACMC,CAAC,IAAI;AACTJ,MAAAA,OAAO,CAACI,CAAD,CAAP;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD,EAKCG,KALD,CAKOC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALd;AAMD,GAPQ,EAOP,EAPO,CAAT,CAXuB,CAoBvB;;AACA,MAAIG,IAAI,GAAG,CACT;AAAE7B,IAAAA,IAAI,EAAE,KAAR;AAAe8B,IAAAA,KAAK,EAAE;AAAtB,GADS,EAET;AAAE9B,IAAAA,IAAI,EAAE,MAAR;AAAgB8B,IAAAA,KAAK,EAAE;AAAvB,GAFS,EAGT;AAAE9B,IAAAA,IAAI,EAAE,KAAR;AAAe8B,IAAAA,KAAK,EAAE;AAAtB,GAHS,EAIT;AAAE9B,IAAAA,IAAI,EAAE,KAAR;AAAe8B,IAAAA,KAAK,EAAE;AAAtB,GAJS,CAAX,CArBuB,CA4BvB;;AACAC,EAAAA,KAAK,CAACC,IAAN,CAAWb,IAAX,EAAiBc,GAAjB,CAAsBhC,KAAD,IAAW;AAC9B,QAAIA,KAAK,CAACkB,IAAN,KAAe,KAAnB,EAA0B;AACxBU,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,IAAiB,CAAjB;AACD,KAFD,MAEM,IAAG7B,KAAK,CAACkB,IAAN,KAAe,MAAlB,EAA0B;AAC9BU,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,IAAiB,CAAjB;AACD,KAFK,MAEA,IAAG7B,KAAK,CAACkB,IAAN,KAAe,KAAlB,EAAyB;AAC7BU,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,IAAiB,CAAjB;AACD,KAFK,MAED;AACHD,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,IAAiB,CAAjB;AACD;AACF,GAVD;AAcA,sBACE;AAAA,cAEIT,OAAO,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAGP;AAAA,8BAEE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACCF,IAAI,CAACc,GAAL,CAAUT,CAAC,iBAAI,QAAC,WAAD,OAAiBA;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAAf;AADD;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BAEE,QAAC,QAAD;AAAU,UAAA,SAAS,EAAC,iBAApB;AAAsC,UAAA,KAAK,EAAE,GAA7C;AAAkD,UAAA,MAAM,EAAE,GAA1D;AAAA,iCACE,QAAC,GAAD;AACE,YAAA,IAAI,EAAEK,IADR;AAEE,YAAA,EAAE,EAAE,GAFN;AAGE,YAAA,EAAE,EAAE,GAHN;AAIE,YAAA,SAAS,EAAE,KAJb;AAKE,YAAA,KAAK,EAAE9B,qBALT;AAME,YAAA,WAAW,EAAE,GANf;AAOE,YAAA,IAAI,EAAC,SAPP;AAQE,YAAA,OAAO,EAAC,OARV;AAAA,oCAUE,QAAC,SAAD;AACE,cAAA,OAAO,EAAC,MADV;AAEE,cAAA,QAAQ,EAAC,cAFX;AAGE,cAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,oBAVF,EAgBG8B,IAAI,CAACI,GAAL,CAAS,CAACC,KAAD,EAAQ1B,KAAR,kBACR,QAAC,IAAD;AAA4B,cAAA,IAAI,EAAEb,MAAM,CAACa,KAAK,GAAGb,MAAM,CAACwC,MAAhB;AAAxC,eAAY,QAAO3B,KAAM,EAAzB;AAAA;AAAA;AAAA;AAAA,oBADD,CAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD,CAxFM;;GAAMO,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { getMood } from './api/getMood'\nimport { MoodContent } from './components/MoodContent'\nimport { PieChart, Pie, Cell, LabelList } from \"recharts\";\n\nimport './Top.css'\n// import { CategoryList } from '../components/CategoryList'\n\n\nconst COLORS = ['#FFCC33', '#98FB98', '#DDA0DD', '#D3D3D3'];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({ name, value, cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <>\n      <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    </>\n  );\n};\n\n\n\n\n\nexport const Top = () => {\n  const initialState = {\n    id: '',\n    date: '',\n    mood: '',\n  }\n\n  const[mood, setMood] = useState(initialState);\n  const[loading, setLoading] = useState(true);\n\n\n  useEffect(() => {\n    getMood()\n    .then(d => {\n      setMood(d)\n      setLoading(false)\n    })\n    .catch(err => console.log(err));\n  },[])\n\n  // added\n  let data = [\n    { name: 'rad', count: 0 },\n    { name: 'good', count: 0 },\n    { name: 'meh', count: 0 },\n    { name: 'bad', count: 0 },\n  ];\n\n  // ここにmap関数で取り出し、個数を数える\n  Array.from(mood).map((value) => {\n    if (value.mood === 'rad') {\n      data[0].count += 1;\n    }else if(value.mood === 'good') {\n      data[1].count += 1;\n    }else if(value.mood === 'meh') {\n      data[2].count += 1;\n    }else{\n      data[3].count += 1;\n    }\n  });\n\n\n\n  return(\n    <div>\n      {\n        loading ?\n        <h1>loading...</h1>\n        :\n        <div>\n\n          <div className='Top'>\n          {mood.map( d => <MoodContent {...d}  /> )}\n          </div>\n\n          <div className='pie-chart-parent'>\n\n            <PieChart className='pie-chart-child' width={400} height={400}>\n              <Pie\n                data={data}\n                cx={200}\n                cy={200}\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={150}\n                fill=\"#8884d8\"\n                dataKey=\"count\"\n              >\n                <LabelList\n                  dataKey=\"name\"\n                  position=\"outsideRight\"\n                  angle=\"0\"\n                />\n\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n            </PieChart>\n\n          </div>\n\n        </div>\n\n      }\n    </div>\n  )\n\n}\n"]},"metadata":{},"sourceType":"module"}